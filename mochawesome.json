{
  "stats": {
    "suites": 38,
    "tests": 147,
    "passes": 117,
    "pending": 0,
    "failures": 30,
    "start": "2022-10-12T11:10:35.679Z",
    "end": "2022-10-12T11:11:47.105Z",
    "duration": 71426,
    "testsRegistered": 147,
    "passPercent": 79.59183673469387,
    "pendingPercent": 0,
    "other": 2,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "510c235d-cdaa-40bb-bef6-eb8fe5a3cbf9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (process.env.ENV === 'STAGE') {\n    const token = 'eyJraWQiOiI2R0FXM3NoR0xuV1RNbUlESXFmSFZRanJFZUtqdCs5cUorSHNXME9yK2pZPSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiMTdwVXg5dUQ0X3NJQkE1M3RTdGphdyIsInN1YiI6IjdhZWVkMjc1LTNjYjctNDVjMy04NWM5LTQ1YjVhZjI5OGQwZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RMXR1Q1lOcVQiLCJjb2duaXRvOnVzZXJuYW1lIjoiN2FlZWQyNzUtM2NiNy00NWMzLTg1YzktNDViNWFmMjk4ZDBlIiwiYXVkIjoiMzljdGxwc2MzMXNjcmxxaDU4NmZjZ2ticGQiLCJ0b2tlbl91c2UiOiJpZCIsImF1dGhfdGltZSI6MTY2NTU3MTg1MCwiZXhwIjoxNjY1NjU4MjUwLCJpYXQiOjE2NjU1NzE4NTAsImp0aSI6ImVhZjUyNTY4LWJjYzYtNDI0ZS05ZDNmLTBhZjUyYThkMjRlNSIsImVtYWlsIjoiZGlhbmEub3ZzaXVjaGVua29AaW5tb3N0LnBybyJ9.QStV4PDX9klICpP3010udGH5V593-X09M9JnkMWchDnh0kE1byqEz4PCakLANkwkg4BIjmgML0ZkxX4GaP-4xz4UbDTmO8NTAOU5Rk7AkwmOUiItAdo7ub2zsYxshUEy7ixCQvigQqvQ0de3lfpPuSTruRsPsyMmvhTNdxI9yF2pm9aCWpjDDICHzo3VI_a054D6RJQazUnNH9GQdLOB-XnbpeJ5XCLqPEXBNohFLsVL9VGZBiXH7mVwUVDZps31fNTnUpEgzlZias2bH0j4xgjxa1w84MD5a9gE5GQyqV68BI5uIbYOoa_KWMHaoxKcrX2TtTckIRb-QECZuHho3w';\n    request.options.baseUrl = 'https://dx56nadid8.execute-api.us-east-1.amazonaws.com/stage';\n    request.options.token = token;\n    reqOptions.token = token;\n} else if (process.env.ENV === 'PROD') {\n    const token = '';\n    request.options.baseUrl = 'https://chyu32umra.execute-api.us-east-1.amazonaws.com/prod';\n    request.options.token = token;\n    reqOptions.token = token;\n} else {\n    throw new Error('Not found ENV');\n}",
          "err": {},
          "uuid": "d410e5dc-e30f-4a69-8141-55cb3db47089",
          "parentUUID": "510c235d-cdaa-40bb-bef6-eb8fe5a3cbf9",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7c5df0d3-2862-47e8-9348-5336903159c6",
          "title": "Should test \"Get information about cameras in location's system\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\get.info.about.cameras.spec.js",
          "file": "\\spec\\powder_watts\\api\\cameras\\get.info.about.cameras.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET information about cameras successfully",
              "fullTitle": "Should test \"Get information about cameras in location's system\" should GET information about cameras successfully",
              "timedOut": false,
              "duration": 971,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras?system_id=' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "8dce07e0-64d2-4e20-8bf5-d551f6b771c3",
              "parentUUID": "7c5df0d3-2862-47e8-9348-5336903159c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Get information about cameras in location's system\" should FAIL with wrong token",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras?system_id=' + id, {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "44d756a2-f8e1-4014-9571-b1514e436a63",
              "parentUUID": "7c5df0d3-2862-47e8-9348-5336903159c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Get information about cameras in location's system\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/cameras?system_id=' + id);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(415);\n// expect(res.response.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "c881e33a-b5a7-4038-88f3-fd9f361e90cc",
              "parentUUID": "7c5df0d3-2862-47e8-9348-5336903159c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8dce07e0-64d2-4e20-8bf5-d551f6b771c3",
            "44d756a2-f8e1-4014-9571-b1514e436a63",
            "c881e33a-b5a7-4038-88f3-fd9f361e90cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1424,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "46dcc1c4-4877-45c4-a322-bb4b22c1b79f",
          "title": "Should test \"Delete camera\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\delete.camera.spec.js",
          "file": "\\spec\\powder_watts\\api\\cameras\\id\\delete.camera.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST new camera successfully",
              "fullTitle": "Should test \"Delete camera\" should POST new camera successfully",
              "timedOut": false,
              "duration": 685,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/cameras', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.camera_id;\nconsole.log(\"camera with id \" + id + \" is created.\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\delete.camera.spec.js:22:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "3d615ba7-728c-4d2c-b187-dba709cc326a",
              "parentUUID": "46dcc1c4-4877-45c4-a322-bb4b22c1b79f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should DELETE camera successfully",
              "fullTitle": "Should test \"Delete camera\" should DELETE camera successfully",
              "timedOut": false,
              "duration": 532,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/cameras/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"Camera with id \"+ id + \" is deleted\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\delete.camera.spec.js:30:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "3b811cb5-055a-492d-a0ef-8506b56b661f",
              "parentUUID": "46dcc1c4-4877-45c4-a322-bb4b22c1b79f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete camera\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/cameras/' + id, {},\n    {\n        'Authorization': ''\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "2ff153cd-b8e4-4278-a1b8-7ea22c23f89b",
              "parentUUID": "46dcc1c4-4877-45c4-a322-bb4b22c1b79f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Delete camera\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/cameras/' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(415);\nexpect(res.response.statusText).to.include(\"Unsupported\");",
              "err": {},
              "uuid": "c23654e6-38d6-48cf-b1c9-99694df903b2",
              "parentUUID": "46dcc1c4-4877-45c4-a322-bb4b22c1b79f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ff153cd-b8e4-4278-a1b8-7ea22c23f89b",
            "c23654e6-38d6-48cf-b1c9-99694df903b2"
          ],
          "failures": [
            "3d615ba7-728c-4d2c-b187-dba709cc326a",
            "3b811cb5-055a-492d-a0ef-8506b56b661f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0e243ab0-4360-410e-aecf-fef95461b1fa",
          "title": "Should test \"Get camera by id\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\get.camera.spec.js",
          "file": "\\spec\\powder_watts\\api\\cameras\\id\\get.camera.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET camera successfully",
              "fullTitle": "Should test \"Get camera by id\" should GET camera successfully",
              "timedOut": false,
              "duration": 370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "f0ad1673-7dbf-48ba-b2a9-f6e051a2cab5",
              "parentUUID": "0e243ab0-4360-410e-aecf-fef95461b1fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Get camera by id\" should FAIL with wrong token",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras/' + id, {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "f3a25033-6607-4fee-9d38-dad54c9585e1",
              "parentUUID": "0e243ab0-4360-410e-aecf-fef95461b1fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong id",
              "fullTitle": "Should test \"Get camera by id\" should FAIL with wrong id",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras/' + wrongId);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "63ec0279-28e1-4dbb-9544-4b19c4a8fe85",
              "parentUUID": "0e243ab0-4360-410e-aecf-fef95461b1fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Get camera by id\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/cameras/' + id);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "57ccd634-eb5a-4623-8699-0b70037e4253",
              "parentUUID": "0e243ab0-4360-410e-aecf-fef95461b1fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0ad1673-7dbf-48ba-b2a9-f6e051a2cab5",
            "f3a25033-6607-4fee-9d38-dad54c9585e1",
            "63ec0279-28e1-4dbb-9544-4b19c4a8fe85",
            "57ccd634-eb5a-4623-8699-0b70037e4253"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1029,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a4597d96-07c4-462b-a9bb-18caa610895b",
          "title": "Should test \"Get history (images) of some camera in some location system",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\get.images.from.camera.spec.js",
          "file": "\\spec\\powder_watts\\api\\cameras\\id\\get.images.from.camera.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET images of some camera successfully",
              "fullTitle": "Should test \"Get history (images) of some camera in some location system should GET images of some camera successfully",
              "timedOut": false,
              "duration": 603,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras/' + id + '/photos');\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "673fc105-c475-4721-b096-3dc8ec97fcbd",
              "parentUUID": "a4597d96-07c4-462b-a9bb-18caa610895b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Get history (images) of some camera in some location system should FAIL with wrong token",
              "timedOut": false,
              "duration": 469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/cameras/' + id + '/photos', {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "f4d3c8a3-3d28-4073-b6c3-7dd2acba4eb0",
              "parentUUID": "a4597d96-07c4-462b-a9bb-18caa610895b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Get history (images) of some camera in some location system should FAIL with wrong request type",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/cameras/' + id + '/photos');\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "7fa092ae-e0fd-4607-9d8d-88111ad1ad41",
              "parentUUID": "a4597d96-07c4-462b-a9bb-18caa610895b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "673fc105-c475-4721-b096-3dc8ec97fcbd",
            "f4d3c8a3-3d28-4073-b6c3-7dd2acba4eb0",
            "7fa092ae-e0fd-4607-9d8d-88111ad1ad41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1478,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3b865d13-af21-4443-bca8-90635e8a80a3",
          "title": "Should test \"Update camera by id",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\put.update.camera.spec.js",
          "file": "\\spec\\powder_watts\\api\\cameras\\id\\put.update.camera.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT camera mode successfully with TRUE",
              "fullTitle": "Should test \"Update camera by id should PUT camera mode successfully with TRUE",
              "timedOut": false,
              "duration": 697,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/cameras/' + id, dataTrue);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nexpect(res.data.data.autoupdate_firmware).to.eql(true);",
              "err": {},
              "uuid": "6f8837e2-2028-4646-a71c-fc3c3c3aa4ce",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should PUT camera mode successfully with FALSE",
              "fullTitle": "Should test \"Update camera by id should PUT camera mode successfully with FALSE",
              "timedOut": false,
              "duration": 462,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/cameras/' + id, dataFalse);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nexpect(res.data.data.autoupdate_firmware).to.eql(false);",
              "err": {
                "message": "AssertionError: expected true to deeply equal false",
                "estack": "AssertionError: expected true to deeply equal false\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\id\\put.update.camera.spec.js:33:54)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "c2edc0e3-0afc-4731-8297-b9bc3f3a9b1b",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Update camera by id account does not exist",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/cameras/' + id, dataTrue,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "4128ff6f-766b-4292-877f-b5f79ef14899",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"Update camera by id should fail with Forbidden",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/cameras/' + id, dataTrue);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "55ecbd26-9459-4177-b055-b19c6a5fa65f",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"Update camera by id should fail with empty data",
              "timedOut": false,
              "duration": 523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/cameras/' + id, emptyData);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(400);",
              "err": {},
              "uuid": "5059b281-63eb-4448-9a51-27ba6a2f2c86",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Update camera by id should fail with wrong id",
              "timedOut": false,
              "duration": 346,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/cameras/' + wrongId, dataTrue);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "b2718e54-3f4c-48fe-afcc-26d28b86dee1",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no property",
              "fullTitle": "Should test \"Update camera by id should fail with no property",
              "timedOut": false,
              "duration": 399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/cameras/', dataTrue);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "1c6d7965-a62d-4e88-82c1-202ace0a7bc4",
              "parentUUID": "3b865d13-af21-4443-bca8-90635e8a80a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f8837e2-2028-4646-a71c-fc3c3c3aa4ce",
            "4128ff6f-766b-4292-877f-b5f79ef14899",
            "55ecbd26-9459-4177-b055-b19c6a5fa65f",
            "5059b281-63eb-4448-9a51-27ba6a2f2c86",
            "b2718e54-3f4c-48fe-afcc-26d28b86dee1",
            "1c6d7965-a62d-4e88-82c1-202ace0a7bc4"
          ],
          "failures": [
            "c2edc0e3-0afc-4731-8297-b9bc3f3a9b1b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3019,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a42238c7-41be-48ae-9c0b-9aee3754b303",
          "title": "Should test \"create new camera",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\post.create.camera.spec.js",
          "file": "\\spec\\powder_watts\\api\\cameras\\post.create.camera.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: should delete camera for \"account does not exist\"",
              "fullTitle": "Should test \"create new camera \"after all\" hook: should delete camera for \"account does not exist\"",
              "timedOut": false,
              "duration": 234,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/cameras/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"Camera with id \"+ id + \" is deleted\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\post.create.camera.spec.js:42:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "fb6b7e5d-a754-454e-94f2-ed3daeab8317",
              "parentUUID": "a42238c7-41be-48ae-9c0b-9aee3754b303",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should POST new camera successfully",
              "fullTitle": "Should test \"create new camera should POST new camera successfully",
              "timedOut": false,
              "duration": 840,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/cameras', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.camera_id;\nconsole.log(id)",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\cameras\\post.create.camera.spec.js:22:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "f12f70f4-ca6b-459d-9385-663e9b9a4dec",
              "parentUUID": "a42238c7-41be-48ae-9c0b-9aee3754b303",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"create new camera account does not exist",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/cameras', data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "978ea189-afff-4011-a137-1f04d8726811",
              "parentUUID": "a42238c7-41be-48ae-9c0b-9aee3754b303",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "978ea189-afff-4011-a137-1f04d8726811"
          ],
          "failures": [
            "f12f70f4-ca6b-459d-9385-663e9b9a4dec"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1025,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "309f3b46-dbc3-4ce2-a8eb-a3aba71d5fc2",
          "title": "Should test \"Check firmware for hub by id\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\firmware\\check\\get.check.firmware.for.hub.spec.js",
          "file": "\\spec\\powder_watts\\api\\firmware\\check\\get.check.firmware.for.hub.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET firmware for hub successfully",
              "fullTitle": "Should test \"Check firmware for hub by id\" should GET firmware for hub successfully",
              "timedOut": false,
              "duration": 339,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/hubs/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\firmware\\check\\get.check.firmware.for.hub.spec.js:21:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "de1a47cc-8f21-413a-ae7e-d3bd5bd902d3",
              "parentUUID": "309f3b46-dbc3-4ce2-a8eb-a3aba71d5fc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Check firmware for hub by id\" should FAIL with wrong token",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/hubs/' + id, {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "5b0e2e68-e350-4041-87df-fec2885d0993",
              "parentUUID": "309f3b46-dbc3-4ce2-a8eb-a3aba71d5fc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong id",
              "fullTitle": "Should test \"Check firmware for hub by id\" should FAIL with wrong id",
              "timedOut": false,
              "duration": 315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/hubs/' + wrongId);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "81a95684-be3b-4aa9-b7f0-d914236df816",
              "parentUUID": "309f3b46-dbc3-4ce2-a8eb-a3aba71d5fc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Check firmware for hub by id\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/firmware/check/hubs/' + id);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "1241af71-f971-48c8-b0b3-4aaa18882a92",
              "parentUUID": "309f3b46-dbc3-4ce2-a8eb-a3aba71d5fc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b0e2e68-e350-4041-87df-fec2885d0993",
            "81a95684-be3b-4aa9-b7f0-d914236df816",
            "1241af71-f971-48c8-b0b3-4aaa18882a92"
          ],
          "failures": [
            "de1a47cc-8f21-413a-ae7e-d3bd5bd902d3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1244,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "514745c8-e1e8-4af7-bfec-a15c0d2b5fb9",
          "title": "Should test \"Check firmware for switch by id\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\firmware\\check\\get.check.firmware.for.switch.spec.js",
          "file": "\\spec\\powder_watts\\api\\firmware\\check\\get.check.firmware.for.switch.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET firmware for switch successfully",
              "fullTitle": "Should test \"Check firmware for switch by id\" should GET firmware for switch successfully",
              "timedOut": false,
              "duration": 378,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/switches/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\firmware\\check\\get.check.firmware.for.switch.spec.js:21:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "f4c1dd82-5552-4ca1-a650-d30ca198d3b3",
              "parentUUID": "514745c8-e1e8-4af7-bfec-a15c0d2b5fb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Check firmware for switch by id\" should FAIL with wrong token",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/switches/' + id, {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "8a52b028-3d41-457e-b848-140267562627",
              "parentUUID": "514745c8-e1e8-4af7-bfec-a15c0d2b5fb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong id",
              "fullTitle": "Should test \"Check firmware for switch by id\" should FAIL with wrong id",
              "timedOut": false,
              "duration": 569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/switches/' + wrongId);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "77cc5da1-ad8d-48e1-b697-d7c45772e778",
              "parentUUID": "514745c8-e1e8-4af7-bfec-a15c0d2b5fb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Check firmware for switch by id\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/firmware/check/switches/' + id);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "6734becb-1393-4618-928d-96199758ba82",
              "parentUUID": "514745c8-e1e8-4af7-bfec-a15c0d2b5fb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a52b028-3d41-457e-b848-140267562627",
            "77cc5da1-ad8d-48e1-b697-d7c45772e778",
            "6734becb-1393-4618-928d-96199758ba82"
          ],
          "failures": [
            "f4c1dd82-5552-4ca1-a650-d30ca198d3b3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3fe96d0b-8e27-4938-8b30-266e70ae2eb9",
          "title": "Should test \"Check new firmware for camera by camera_id\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\firmware\\check\\get.check.new.firmware.for.camera.spec.js",
          "file": "\\spec\\powder_watts\\api\\firmware\\check\\get.check.new.firmware.for.camera.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET new firmware for camera successfully",
              "fullTitle": "Should test \"Check new firmware for camera by camera_id\" should GET new firmware for camera successfully",
              "timedOut": false,
              "duration": 594,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/cameras/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\firmware\\check\\get.check.new.firmware.for.camera.spec.js:21:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "06bdbedc-70bd-45ce-bd02-0f0447aeeba4",
              "parentUUID": "3fe96d0b-8e27-4938-8b30-266e70ae2eb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Check new firmware for camera by camera_id\" should FAIL with wrong token",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/cameras/' + id, {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "e7127ca5-2d88-424b-8912-8374e9236aa3",
              "parentUUID": "3fe96d0b-8e27-4938-8b30-266e70ae2eb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong id",
              "fullTitle": "Should test \"Check new firmware for camera by camera_id\" should FAIL with wrong id",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/firmware/check/cameras/' + wrongId);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "f39fba25-de3b-4928-ac97-81ac71e27c72",
              "parentUUID": "3fe96d0b-8e27-4938-8b30-266e70ae2eb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Check new firmware for camera by camera_id\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/firmware/check/cameras/' + id);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "8f598396-2a8e-438c-8461-bacaba4db12f",
              "parentUUID": "3fe96d0b-8e27-4938-8b30-266e70ae2eb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7127ca5-2d88-424b-8912-8374e9236aa3",
            "f39fba25-de3b-4928-ac97-81ac71e27c72",
            "8f598396-2a8e-438c-8461-bacaba4db12f"
          ],
          "failures": [
            "06bdbedc-70bd-45ce-bd02-0f0447aeeba4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1756,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "8df620f0-2b4a-43cc-ac38-73e7a1e306f6",
          "title": "Should test \"Delete hub by id\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\hubs\\id\\delete.hub.spec.js",
          "file": "\\spec\\powder_watts\\api\\hubs\\id\\delete.hub.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create new hub successfully",
              "fullTitle": "Should test \"Delete hub by id\" should create new hub successfully",
              "timedOut": false,
              "duration": 858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/hubs/', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.hub_id;\nconsole.log(id)",
              "err": {},
              "uuid": "e503af7d-b8fb-44c7-81a4-8e47319f1ed8",
              "parentUUID": "8df620f0-2b4a-43cc-ac38-73e7a1e306f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should DELETE hub successfully",
              "fullTitle": "Should test \"Delete hub by id\" should DELETE hub successfully",
              "timedOut": false,
              "duration": 717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/hubs/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"hub with id \"+ id + \" is deleted\")",
              "err": {},
              "uuid": "f7056d0f-e98d-4fb8-a238-4a56f8fbc97d",
              "parentUUID": "8df620f0-2b4a-43cc-ac38-73e7a1e306f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete hub by id\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/hubs/' + id, {},\n    {\n        'Authorization': ''\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "ffbbf723-7cd1-4ca3-885b-c425a6f29e3e",
              "parentUUID": "8df620f0-2b4a-43cc-ac38-73e7a1e306f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Delete hub by id\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 461,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/hubs/' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(415);\nexpect(res.response.statusText).to.include(\"Unsupported\");",
              "err": {},
              "uuid": "28a7949f-6e90-4e1d-b83e-139632d5041c",
              "parentUUID": "8df620f0-2b4a-43cc-ac38-73e7a1e306f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e503af7d-b8fb-44c7-81a4-8e47319f1ed8",
            "f7056d0f-e98d-4fb8-a238-4a56f8fbc97d",
            "ffbbf723-7cd1-4ca3-885b-c425a6f29e3e",
            "28a7949f-6e90-4e1d-b83e-139632d5041c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2435,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0a755337-1db8-43c8-aeba-c29218c1af39",
          "title": "Should test \"Update hub by id",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\hubs\\id\\put.update.hub.spec.js",
          "file": "\\spec\\powder_watts\\api\\hubs\\id\\put.update.hub.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update hub successfully",
              "fullTitle": "Should test \"Update hub by id should update hub successfully",
              "timedOut": false,
              "duration": 615,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/hubs/' + id, data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\hubs\\id\\put.update.hub.spec.js:24:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "42673902-a68a-49fc-841e-5da35ce90199",
              "parentUUID": "0a755337-1db8-43c8-aeba-c29218c1af39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Update hub by id account does not exist",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/hubs/' + id, data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "2f639b30-78c6-4348-81b4-1034c997ec09",
              "parentUUID": "0a755337-1db8-43c8-aeba-c29218c1af39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"Update hub by id should fail with Forbidden",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/hubs/' + id, data);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "1dd12b13-9ef0-46b3-a740-51b61064b644",
              "parentUUID": "0a755337-1db8-43c8-aeba-c29218c1af39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"Update hub by id should fail with empty data",
              "timedOut": false,
              "duration": 552,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/hubs/' + id, emptyData);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(400);",
              "err": {},
              "uuid": "5cb5f1cb-b34b-4143-bad4-c8017d7e7517",
              "parentUUID": "0a755337-1db8-43c8-aeba-c29218c1af39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Update hub by id should fail with wrong id",
              "timedOut": false,
              "duration": 582,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/hubs/' + wrongId, data);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "abc3fbe8-0d96-403d-8137-ab987e3053e9",
              "parentUUID": "0a755337-1db8-43c8-aeba-c29218c1af39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no property",
              "fullTitle": "Should test \"Update hub by id should fail with no property",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/hubs/', data);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden');",
              "err": {},
              "uuid": "d67db09f-03e4-481f-a858-d5240f6f8001",
              "parentUUID": "0a755337-1db8-43c8-aeba-c29218c1af39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f639b30-78c6-4348-81b4-1034c997ec09",
            "1dd12b13-9ef0-46b3-a740-51b61064b644",
            "5cb5f1cb-b34b-4143-bad4-c8017d7e7517",
            "abc3fbe8-0d96-403d-8137-ab987e3053e9",
            "d67db09f-03e4-481f-a858-d5240f6f8001"
          ],
          "failures": [
            "42673902-a68a-49fc-841e-5da35ce90199"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2541,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "361ab84e-2a62-4dc3-9b41-ebc0695be868",
          "title": "Should test \"create new hub",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\hubs\\post.create.hub.spec.js",
          "file": "\\spec\\powder_watts\\api\\hubs\\post.create.hub.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST new hub successfully",
              "fullTitle": "Should test \"create new hub should POST new hub successfully",
              "timedOut": false,
              "duration": 654,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/hubs', prodData);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nhub_id = res.data.data.hub_id;\nconsole.log(hub_id)",
              "err": {},
              "uuid": "e1431cfd-a130-4c63-95e1-f26a12ec8082",
              "parentUUID": "361ab84e-2a62-4dc3-9b41-ebc0695be868",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"create new hub account does not exist",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/hubs', prodData,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "3ad7a367-dabb-4444-ae9b-cc2a682553f4",
              "parentUUID": "361ab84e-2a62-4dc3-9b41-ebc0695be868",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"create new hub should fail with empty data",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/hubs', emptyProdData);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(422);\nexpect(res.response.data.message).to.include(\"is a required property\")",
              "err": {},
              "uuid": "a18c83d2-f9b6-41a1-aa79-5fa4316e217e",
              "parentUUID": "361ab84e-2a62-4dc3-9b41-ebc0695be868",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"create new hub should fail with empty data",
              "timedOut": false,
              "duration": 516,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/hubs', emptyProdData);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(422);\nexpect(res.response.data.message).to.include(\"is a required property\")",
              "err": {},
              "uuid": "8537c0c1-468a-4cfc-a79e-4d11e2ba6f9a",
              "parentUUID": "361ab84e-2a62-4dc3-9b41-ebc0695be868",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete hub",
              "fullTitle": "Should test \"create new hub should delete hub",
              "timedOut": false,
              "duration": 680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/hubs/' + hub_id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"hub with id \"+ hub_id + \" is deleted\")",
              "err": {},
              "uuid": "a17a9081-f8b1-4ad5-9456-839239c60f3f",
              "parentUUID": "361ab84e-2a62-4dc3-9b41-ebc0695be868",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1431cfd-a130-4c63-95e1-f26a12ec8082",
            "3ad7a367-dabb-4444-ae9b-cc2a682553f4",
            "a18c83d2-f9b6-41a1-aa79-5fa4316e217e",
            "8537c0c1-468a-4cfc-a79e-4d11e2ba6f9a",
            "a17a9081-f8b1-4ad5-9456-839239c60f3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9626873e-ba53-4024-80dc-2569166882ee",
          "title": "Should test \"Delete location\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\locations\\id\\delete.location.spec.js",
          "file": "\\spec\\powder_watts\\api\\locations\\id\\delete.location.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: should POST new location successfully in \"Should test \"Delete location\"\"",
              "fullTitle": "Should test \"Delete location\" \"before all\" hook: should POST new location successfully in \"Should test \"Delete location\"\"",
              "timedOut": false,
              "duration": 509,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/locations', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.location_id;\nconsole.log(id)",
              "err": {},
              "uuid": "338e3546-84d2-46c5-8ee5-5fc7f6f13465",
              "parentUUID": "9626873e-ba53-4024-80dc-2569166882ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should DELETE location successfully",
              "fullTitle": "Should test \"Delete location\" should DELETE location successfully",
              "timedOut": false,
              "duration": 670,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/locations/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"Location with id \"+ id + \" is deleted\")",
              "err": {},
              "uuid": "ed72311f-1d19-4bd3-9738-079f1843ba69",
              "parentUUID": "9626873e-ba53-4024-80dc-2569166882ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete location\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/locations/' + id, {},\n    {\n        'Authorization': ''\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "08b94e14-290b-4816-a4c8-c778182175a3",
              "parentUUID": "9626873e-ba53-4024-80dc-2569166882ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Delete location\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/locations/' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(415);\nexpect(res.response.statusText).to.include(\"Unsupported\");",
              "err": {},
              "uuid": "45650d57-bf4e-4284-94d0-8088eff8289f",
              "parentUUID": "9626873e-ba53-4024-80dc-2569166882ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed72311f-1d19-4bd3-9738-079f1843ba69",
            "08b94e14-290b-4816-a4c8-c778182175a3",
            "45650d57-bf4e-4284-94d0-8088eff8289f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1330,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "75d90bfa-a7a9-4560-91a8-e948f58aca7a",
          "title": "Should test \"create new location",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\locations\\post.new.location.spec.js",
          "file": "\\spec\\powder_watts\\api\\locations\\post.new.location.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: should delete location in \"Should test \"create new location\"",
              "fullTitle": "Should test \"create new location \"after all\" hook: should delete location in \"Should test \"create new location\"",
              "timedOut": false,
              "duration": 683,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/locations/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"Location with id \"+ id + \" is deleted\")",
              "err": {},
              "uuid": "d581d448-e511-459c-b791-5cbc87b9964a",
              "parentUUID": "75d90bfa-a7a9-4560-91a8-e948f58aca7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should POST new location successfully",
              "fullTitle": "Should test \"create new location should POST new location successfully",
              "timedOut": false,
              "duration": 597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/locations', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.location_id;\nconsole.log(id)",
              "err": {},
              "uuid": "6bc8e3c6-dcd2-4166-a4c3-67d3929e2b35",
              "parentUUID": "75d90bfa-a7a9-4560-91a8-e948f58aca7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"create new location account does not exist",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/locations', data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "c74fafed-1be7-44c5-bddd-1af836d4ced8",
              "parentUUID": "75d90bfa-a7a9-4560-91a8-e948f58aca7a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bc8e3c6-dcd2-4166-a4c3-67d3929e2b35",
            "c74fafed-1be7-44c5-bddd-1af836d4ced8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 782,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2896541b-e005-4169-9be1-1c26510c703e",
          "title": "Should test \"Delete device from user\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\devices\\delete.device_from_user.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\devices\\delete.device_from_user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should DELETE device successfully",
              "fullTitle": "Should test \"Delete device from user\" should DELETE device successfully",
              "timedOut": false,
              "duration": 608,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/profile/devices/:' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(204);",
              "err": {},
              "uuid": "bf6cbc28-3c9f-4786-b408-8ce5389a07f7",
              "parentUUID": "2896541b-e005-4169-9be1-1c26510c703e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete device from user\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/profile/devices/:' + id, {},\n    {\n        'Authorization': '1111'\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "8abd1910-f816-4cfc-ab61-e3a6c79859cb",
              "parentUUID": "2896541b-e005-4169-9be1-1c26510c703e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Delete device from user\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile/devices/:' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "de2eee2d-3057-4eff-a54b-262f48342f94",
              "parentUUID": "2896541b-e005-4169-9be1-1c26510c703e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf6cbc28-3c9f-4786-b408-8ce5389a07f7",
            "8abd1910-f816-4cfc-ab61-e3a6c79859cb",
            "de2eee2d-3057-4eff-a54b-262f48342f94"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1203,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "38431d01-cbf5-4fc1-861a-a16fa2e173e5",
          "title": "Should test \"Add device of user\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\devices\\post.add_device_of_user.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\devices\\post.add_device_of_user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST device successfully",
              "fullTitle": "Should test \"Add device of user\" should POST device successfully",
              "timedOut": false,
              "duration": 430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/devices', dataIos);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "7c35ed81-2ce9-4ebe-820a-2d2a9f629196",
              "parentUUID": "38431d01-cbf5-4fc1-861a-a16fa2e173e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Invalid OS. Possible values: android, ios / Invalid request. Missing parameters",
              "fullTitle": "Should test \"Add device of user\" should FAIL with Invalid OS. Possible values: android, ios / Invalid request. Missing parameters",
              "timedOut": false,
              "duration": 415,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/devices', data1);\nconsole.log(res.message);\nexpect(res.response.status).to.eql(422);\nexpect(res.response.data.message).to.include(\"is not one of ['ios', 'android']\");\n    //TODO AFTER FIXING BC GOT STATUS 200",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\devices\\post.add_device_of_user.spec.js:28:29)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "0c36525c-bb63-4a0f-a370-91fec1f9a605",
              "parentUUID": "38431d01-cbf5-4fc1-861a-a16fa2e173e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Add device of user\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/devices', dataIos,\n    {\n        'Authorization': '1111'\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "794713de-3a1c-4a8f-b9e2-c8214a010e32",
              "parentUUID": "38431d01-cbf5-4fc1-861a-a16fa2e173e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Add device of user\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile/devices', dataIos);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "7b418a93-588b-4532-85ab-5c695916ca27",
              "parentUUID": "38431d01-cbf5-4fc1-861a-a16fa2e173e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c35ed81-2ce9-4ebe-820a-2d2a9f629196",
            "794713de-3a1c-4a8f-b9e2-c8214a010e32",
            "7b418a93-588b-4532-85ab-5c695916ca27"
          ],
          "failures": [
            "0c36525c-bb63-4a0f-a370-91fec1f9a605"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1216,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ab90015f-b5ea-4ab1-8d37-62c25d4a577a",
          "title": "Should test \"Get user profile\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\get.profile.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\get.profile.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET user profile successfully",
              "fullTitle": "Should test \"Get user profile\" should GET user profile successfully",
              "timedOut": false,
              "duration": 618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/profile');\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "0fcd5f5b-6542-4d56-b21c-64c767556ca0",
              "parentUUID": "ab90015f-b5ea-4ab1-8d37-62c25d4a577a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong token",
              "fullTitle": "Should test \"Get user profile\" should FAIL with wrong token",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/profile', {}, {\n    'Authorization': '',\n});\nconsole.log(res.statusText);\nexpect(res.status).to.eql(401);\nexpect(res.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "feb05e89-08b9-4515-9fd5-e48cf060ea18",
              "parentUUID": "ab90015f-b5ea-4ab1-8d37-62c25d4a577a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Get user profile\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile');\nconsole.log(res.statusText);\nexpect(res.status).to.eql(403);\nexpect(res.statusText).to.include('Forbidden')",
              "err": {},
              "uuid": "47e558fe-6cd4-492f-bc75-75efeb202783",
              "parentUUID": "ab90015f-b5ea-4ab1-8d37-62c25d4a577a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0fcd5f5b-6542-4d56-b21c-64c767556ca0",
            "feb05e89-08b9-4515-9fd5-e48cf060ea18",
            "47e558fe-6cd4-492f-bc75-75efeb202783"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1013,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0b331cb7-1557-4229-b40a-3df2aadf20bf",
          "title": "Should test \"Delete location from user\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\id\\delete.location.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\locations\\id\\delete.location.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add location to user",
              "fullTitle": "Should test \"Delete location from user\" should add location to user",
              "timedOut": false,
              "duration": 337,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/locations', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\id\\delete.location.spec.js:22:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "0bd2fd44-516a-4bd8-8807-7a2d8980448a",
              "parentUUID": "0b331cb7-1557-4229-b40a-3df2aadf20bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should DELETE location from user successfully",
              "fullTitle": "Should test \"Delete location from user\" should DELETE location from user successfully",
              "timedOut": false,
              "duration": 496,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/profile/locations/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\id\\delete.location.spec.js:29:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "864f438a-e475-4e1f-acf0-176375919bec",
              "parentUUID": "0b331cb7-1557-4229-b40a-3df2aadf20bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete location from user\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/profile/locations/' + id, null,\n    {\n        'Authorization': '1111'\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "748b29e4-f5b0-439a-a55a-05bd42bd3c80",
              "parentUUID": "0b331cb7-1557-4229-b40a-3df2aadf20bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Forbidden",
              "fullTitle": "Should test \"Delete location from user\" should FAIL with Forbidden",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile/locations/' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "409c47f0-6af1-4f29-9dfb-90cc0d0ec22e",
              "parentUUID": "0b331cb7-1557-4229-b40a-3df2aadf20bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "748b29e4-f5b0-439a-a55a-05bd42bd3c80",
            "409c47f0-6af1-4f29-9dfb-90cc0d0ec22e"
          ],
          "failures": [
            "0bd2fd44-516a-4bd8-8807-7a2d8980448a",
            "864f438a-e475-4e1f-acf0-176375919bec"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1430,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7977de22-79dc-46db-89f8-3a7bf88f25dd",
          "title": "Should test \"Get location info",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\id\\get.location.info.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\locations\\id\\get.location.info.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET location info successfully",
              "fullTitle": "Should test \"Get location info should GET location info successfully",
              "timedOut": false,
              "duration": 1476,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/profile/locations/'+ id);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "96423b29-044f-46a2-b73c-15202fa9caf4",
              "parentUUID": "7977de22-79dc-46db-89f8-3a7bf88f25dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Get location info account does not exist",
              "timedOut": false,
              "duration": 1768,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/profile/locations/'+ id, null, {\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");\n//TODO AFTER FIING. GOT STATUS 200",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'statusText')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'statusText')\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\id\\get.location.info.spec.js:31:34)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "dd066406-f8a5-430c-a482-c1707fb6b32a",
              "parentUUID": "7977de22-79dc-46db-89f8-3a7bf88f25dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96423b29-044f-46a2-b73c-15202fa9caf4"
          ],
          "failures": [
            "dd066406-f8a5-430c-a482-c1707fb6b32a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3244,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2b1daa7a-1b03-422b-8643-e14bc2629823",
          "title": "Should test \"Add new location",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\post.add.location.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\locations\\post.add.location.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: should delete location in \"Should test \"Add new location\"",
              "fullTitle": "Should test \"Add new location \"after all\" hook: should delete location in \"Should test \"Add new location\"",
              "timedOut": false,
              "duration": 702,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/profile/locations/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"location with id \" + id + \" was deleted\" )",
              "err": {},
              "uuid": "d80a401b-1154-4b2b-a421-ae716a1d0f27",
              "parentUUID": "2b1daa7a-1b03-422b-8643-e14bc2629823",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should POST new location successfully",
              "fullTitle": "Should test \"Add new location should POST new location successfully",
              "timedOut": false,
              "duration": 536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/locations', creationData);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.location_id;\nlocation_key = res.data.data.location_key;\nconsole.log(id + location_key+ \" is created\")",
              "err": {},
              "uuid": "097a123f-c203-48ce-aabb-30a1239533ef",
              "parentUUID": "2b1daa7a-1b03-422b-8643-e14bc2629823",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should POST add new location successfully",
              "fullTitle": "Should test \"Add new location should POST add new location successfully",
              "timedOut": false,
              "duration": 592,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/locations', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\locations\\post.add.location.spec.js:36:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "209d5452-d50f-46ea-8b78-b9f6a6e57eb7",
              "parentUUID": "2b1daa7a-1b03-422b-8643-e14bc2629823",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Add new location account does not exist",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/profile/locations', data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "2e419685-b99e-430d-afda-452ae3c9e3ba",
              "parentUUID": "2b1daa7a-1b03-422b-8643-e14bc2629823",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "097a123f-c203-48ce-aabb-30a1239533ef",
            "2e419685-b99e-430d-afda-452ae3c9e3ba"
          ],
          "failures": [
            "209d5452-d50f-46ea-8b78-b9f6a6e57eb7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1312,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "a75fa1c1-0476-4689-aa9d-72a85485d0ad",
          "title": "Should test \"Create bug or error report",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\post.bug.report.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\post.bug.report.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST bug report successfully",
              "fullTitle": "Should test \"Create bug or error report should POST bug report successfully",
              "timedOut": false,
              "duration": 782,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/report', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "ca9a11df-3a28-42ef-b13f-8ed7e0996878",
              "parentUUID": "a75fa1c1-0476-4689-aa9d-72a85485d0ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with empty data ",
              "fullTitle": "Should test \"Create bug or error report should FAIL with empty data ",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/report', emptyData);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(400);\nexpect(res.response.data.message).to.include(\"Body is empty or is missing fields\");",
              "err": {},
              "uuid": "3c25fda7-84bd-4803-9060-386eae332bd7",
              "parentUUID": "a75fa1c1-0476-4689-aa9d-72a85485d0ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong token",
              "fullTitle": "Should test \"Create bug or error report should fail with wrong token",
              "timedOut": false,
              "duration": 398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile/report', data, {\n    'Authorization': '111'\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "57448d05-8e62-4177-a17b-979adf950835",
              "parentUUID": "a75fa1c1-0476-4689-aa9d-72a85485d0ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Create bug or error report should FAIL with wrong request type",
              "timedOut": false,
              "duration": 399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile/report', data);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "aec28927-452d-466f-9dc0-dfa7c3db132f",
              "parentUUID": "a75fa1c1-0476-4689-aa9d-72a85485d0ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca9a11df-3a28-42ef-b13f-8ed7e0996878",
            "3c25fda7-84bd-4803-9060-386eae332bd7",
            "57448d05-8e62-4177-a17b-979adf950835",
            "aec28927-452d-466f-9dc0-dfa7c3db132f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1837,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c1062458-d5a2-44e1-9444-b898b98bc209",
          "title": "Should test \"Update user profile",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\profile\\put.profile.spec.js",
          "file": "\\spec\\powder_watts\\api\\profile\\put.profile.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT Update user profile successfully",
              "fullTitle": "Should test \"Update user profile should PUT Update user profile successfully",
              "timedOut": false,
              "duration": 639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile', data);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "346dd293-d173-4f97-b3ef-ebf1c98ba024",
              "parentUUID": "c1062458-d5a2-44e1-9444-b898b98bc209",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FAIL with Invalid request. Request body can not be empty",
              "fullTitle": "Should test \"Update user profile FAIL with Invalid request. Request body can not be empty",
              "timedOut": false,
              "duration": 514,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile', {});\nexpect(res.status).to.eql(400);\nexpect(res.data.error).to.eql(\"BaseErrorX\");",
              "err": {},
              "uuid": "6df21d0b-f1b3-4f2f-89c7-3ae64e84f2c7",
              "parentUUID": "c1062458-d5a2-44e1-9444-b898b98bc209",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "FAIL with Unauthorized",
              "fullTitle": "Should test \"Update user profile FAIL with Unauthorized",
              "timedOut": false,
              "duration": 400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/profile', data, {\n    'Authorization': ''\n});\nexpect(res.status).to.eql(401);\nexpect(res.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "3305912f-b5de-4d01-87c4-2f5edafafaa6",
              "parentUUID": "c1062458-d5a2-44e1-9444-b898b98bc209",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Forbidden",
              "fullTitle": "Should test \"Update user profile should FAIL with Forbidden",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/profile', data);\nexpect(res.status).to.eql(403);\nexpect(res.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "88787b9e-d818-4539-82ce-e7a532f53499",
              "parentUUID": "c1062458-d5a2-44e1-9444-b898b98bc209",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "346dd293-d173-4f97-b3ef-ebf1c98ba024",
            "6df21d0b-f1b3-4f2f-89c7-3ae64e84f2c7",
            "3305912f-b5de-4d01-87c4-2f5edafafaa6",
            "88787b9e-d818-4539-82ce-e7a532f53499"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1962,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "856fadad-5bdd-409f-a673-b63ab3153131",
          "title": "Should test \"Get/searches switches history of system in some location\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\get.switch.history.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\get.switch.history.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET switch history successfully",
              "fullTitle": "Should test \"Get/searches switches history of system in some location\" should GET switch history successfully",
              "timedOut": false,
              "duration": 627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(`/switches/history?system_id=${id}`);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "40027b68-55f5-4015-80db-c69a7c50ae0a",
              "parentUUID": "856fadad-5bdd-409f-a673-b63ab3153131",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should a user to be unauthorized",
              "fullTitle": "Should test \"Get/searches switches history of system in some location\" should a user to be unauthorized",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get(`/switches/history?system_id=${id}`, null, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "d83a609e-d3e0-4e80-a627-76b327e6011e",
              "parentUUID": "856fadad-5bdd-409f-a673-b63ab3153131",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty parameter",
              "fullTitle": "Should test \"Get/searches switches history of system in some location\" should fail with empty parameter",
              "timedOut": false,
              "duration": 479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/switches/history?system_id=');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(400)\nexpect(res.response.statusText).to.eql(\"Bad Request\");",
              "err": {},
              "uuid": "6a8bc86d-88bf-465a-9bc1-f7ad375b245e",
              "parentUUID": "856fadad-5bdd-409f-a673-b63ab3153131",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no parameter",
              "fullTitle": "Should test \"Get/searches switches history of system in some location\" should fail with no parameter",
              "timedOut": false,
              "duration": 511,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/switches/history?');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(400)\nexpect(res.response.statusText).to.eql(\"Bad Request\");",
              "err": {},
              "uuid": "4f821951-11c3-42dc-a2eb-0f5fd835fc49",
              "parentUUID": "856fadad-5bdd-409f-a673-b63ab3153131",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40027b68-55f5-4015-80db-c69a7c50ae0a",
            "d83a609e-d3e0-4e80-a627-76b327e6011e",
            "6a8bc86d-88bf-465a-9bc1-f7ad375b245e",
            "4f821951-11c3-42dc-a2eb-0f5fd835fc49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1806,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "32604976-3399-420a-80b0-04ab882bb9b5",
          "title": "Should test \"Delete switch\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\delete.switch.by.id.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\id\\delete.switch.by.id.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST new switch successfully",
              "fullTitle": "Should test \"Delete switch\" should POST new switch successfully",
              "timedOut": false,
              "duration": 762,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data[0].switch_id;\nconsole.log(\"Switch with id \"+ id + \" is created\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\delete.switch.by.id.spec.js:22:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "55c541c9-eeb4-4636-9dd3-f32aea05860d",
              "parentUUID": "32604976-3399-420a-80b0-04ab882bb9b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should DELETE switch successfully",
              "fullTitle": "Should test \"Delete switch\" should DELETE switch successfully",
              "timedOut": false,
              "duration": 460,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/switches/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"Switch with id \"+ id + \" is deleted\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\delete.switch.by.id.spec.js:30:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "dfca8edf-2890-4c44-bdbd-657e17a8a728",
              "parentUUID": "32604976-3399-420a-80b0-04ab882bb9b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete switch\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/switches/' + id, {},\n    {\n        'Authorization': ''\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "de1fd95a-66e1-414c-a98a-0f07ec447304",
              "parentUUID": "32604976-3399-420a-80b0-04ab882bb9b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Delete switch\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 463,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(415);\nexpect(res.response.statusText).to.include(\"Unsupported\");",
              "err": {},
              "uuid": "69c59dc1-3bd4-42c7-9cc4-bbe4b7f124b6",
              "parentUUID": "32604976-3399-420a-80b0-04ab882bb9b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de1fd95a-66e1-414c-a98a-0f07ec447304",
            "69c59dc1-3bd4-42c7-9cc4-bbe4b7f124b6"
          ],
          "failures": [
            "55c541c9-eeb4-4636-9dd3-f32aea05860d",
            "dfca8edf-2890-4c44-bdbd-657e17a8a728"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0d6bd1fb-4484-43f2-b8a1-52113c86ac2a",
          "title": "Should test \"Get switch by id",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\get.switch.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\id\\get.switch.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET user profile successfully",
              "fullTitle": "Should test \"Get switch by id should GET user profile successfully",
              "timedOut": false,
              "duration": 527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/switches/'+ id);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "47bba6af-aba1-47a4-8c44-3f8ba68c79b7",
              "parentUUID": "0d6bd1fb-4484-43f2-b8a1-52113c86ac2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Get switch by id account does not exist",
              "timedOut": false,
              "duration": 339,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/switches/'+ id, null, {\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\n// console.log(res.response.statusText);\nexpect(res.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");\n//TODO AFTER FIXING - STATUS 200 without token on prod",
              "err": {
                "message": "AssertionError: expected 200 to not deeply equal 200",
                "estack": "AssertionError: expected 200 to not deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\get.switch.spec.js:32:35)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": ""
              },
              "uuid": "7b9b3fee-792c-49bf-831d-1f49cd8a8cbd",
              "parentUUID": "0d6bd1fb-4484-43f2-b8a1-52113c86ac2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47bba6af-aba1-47a4-8c44-3f8ba68c79b7"
          ],
          "failures": [
            "7b9b3fee-792c-49bf-831d-1f49cd8a8cbd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 866,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "2d4a99dc-fdb5-474c-9c20-fa6ce0ba4622",
          "title": "Should test \"Start switch connection\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\post.switch.connection.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\id\\post.switch.connection.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST switch connection",
              "fullTitle": "Should test \"Start switch connection\" should POST switch connection",
              "timedOut": false,
              "duration": 1001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches/' + id + '/connect', null, {\n    \"Content-Type\": \"application/json\"\n});\nconsole.log(res.status);\nexpect(res.status).to.eql(204);",
              "err": {},
              "uuid": "6aa48c63-4020-47df-959b-8ad37f79266e",
              "parentUUID": "2d4a99dc-fdb5-474c-9c20-fa6ce0ba4622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Start switch connection\" account does not exist",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/switches/'+id+'/connect', {},{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "cd9a6ab1-86f2-4455-b73f-9a37130fc13f",
              "parentUUID": "2d4a99dc-fdb5-474c-9c20-fa6ce0ba4622",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail without parameter",
              "fullTitle": "Should test \"Start switch connection\" should fail without parameter",
              "timedOut": false,
              "duration": 446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches/'+emptyId+'/connect');\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);",
              "err": {},
              "uuid": "492c4f68-2fb3-4cba-ac16-f9c4ea401e68",
              "parentUUID": "2d4a99dc-fdb5-474c-9c20-fa6ce0ba4622",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6aa48c63-4020-47df-959b-8ad37f79266e",
            "cd9a6ab1-86f2-4455-b73f-9a37130fc13f",
            "492c4f68-2fb3-4cba-ac16-f9c4ea401e68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1854,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "27fb4e39-2110-4fec-bc6b-546684921399",
          "title": "Should test \"Finish switch installation",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.finish.switch.installation.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\id\\put.finish.switch.installation.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT switch mode successfully",
              "fullTitle": "Should test \"Finish switch installation should PUT switch mode successfully",
              "timedOut": false,
              "duration": 183,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + id + '/install');\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.finish.switch.installation.spec.js:22:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "8d5b3798-6cf2-4970-a80e-c62382879456",
              "parentUUID": "27fb4e39-2110-4fec-bc6b-546684921399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Finish switch installation account does not exist",
              "timedOut": false,
              "duration": 185,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/switches/' + id + '/install', {},{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {
                "message": "AssertionError: expected 'Forbidden' to include 'Unauthorized'",
                "estack": "AssertionError: expected 'Forbidden' to include 'Unauthorized'\n    at Proxy.include (C:\\Code\\pwd\\pwd_backend_tests\\node_modules\\chai\\lib\\chai\\core\\assertions.js:585:10)\n    at Proxy.chainableMethodWrapper (C:\\Code\\pwd\\pwd_backend_tests\\node_modules\\chai\\lib\\chai\\utils\\addChainableMethod.js:113:49)\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.finish.switch.installation.spec.js:34:45)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "aa85cf26-5707-4462-ba8e-b2f1c877ac49",
              "parentUUID": "27fb4e39-2110-4fec-bc6b-546684921399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"Finish switch installation should fail with Forbidden",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches/' + id + '/install');\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "5ea983e6-0681-4ffd-b043-40ac6cfa3175",
              "parentUUID": "27fb4e39-2110-4fec-bc6b-546684921399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Finish switch installation should fail with wrong id",
              "timedOut": false,
              "duration": 400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + wrongId + '/install');\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "1c70d6ec-4851-48d4-997c-a3b10a400d03",
              "parentUUID": "27fb4e39-2110-4fec-bc6b-546684921399",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no property",
              "fullTitle": "Should test \"Finish switch installation should fail with no property",
              "timedOut": false,
              "duration": 190,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + {} + '/install');\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(422);\nexpect(res.response.data.message).to.include('is a required property');",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 422",
                "estack": "AssertionError: expected 400 to deeply equal 422\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.finish.switch.installation.spec.js:54:40)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 400\n+ 422\n"
              },
              "uuid": "8bc0c18c-5fa4-4f86-b86e-9ad4c155896a",
              "parentUUID": "27fb4e39-2110-4fec-bc6b-546684921399",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ea983e6-0681-4ffd-b043-40ac6cfa3175",
            "1c70d6ec-4851-48d4-997c-a3b10a400d03"
          ],
          "failures": [
            "8d5b3798-6cf2-4970-a80e-c62382879456",
            "aa85cf26-5707-4462-ba8e-b2f1c877ac49",
            "8bc0c18c-5fa4-4f86-b86e-9ad4c155896a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c2e65dce-1b92-466a-b717-3977cb289e5a",
          "title": "Should test \"Update switch by id",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.update.switch.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\id\\put.update.switch.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT switch mode successfully",
              "fullTitle": "Should test \"Update switch by id should PUT switch mode successfully",
              "timedOut": false,
              "duration": 362,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + id, data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.update.switch.spec.js:25:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "9c8b0244-9e8f-46e0-9805-f8b822bfadf9",
              "parentUUID": "c2e65dce-1b92-466a-b717-3977cb289e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Update switch by id account does not exist",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/switches/' + id, data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "158a3241-301f-4075-b219-a8cd4f619f94",
              "parentUUID": "c2e65dce-1b92-466a-b717-3977cb289e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"Update switch by id should fail with Forbidden",
              "timedOut": false,
              "duration": 397,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches/' + id, data);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "7ed26fc5-0a46-453f-8fa6-1da9ad4afe55",
              "parentUUID": "c2e65dce-1b92-466a-b717-3977cb289e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"Update switch by id should fail with empty data",
              "timedOut": false,
              "duration": 308,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + id, emptyData);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(422);",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 422",
                "estack": "AssertionError: expected 400 to deeply equal 422\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.update.switch.spec.js:50:40)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 400\n+ 422\n"
              },
              "uuid": "1e36bd75-5472-48cf-8ac5-a67a5c283e2c",
              "parentUUID": "c2e65dce-1b92-466a-b717-3977cb289e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Update switch by id should fail with wrong id",
              "timedOut": false,
              "duration": 341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/' + wrongId, data);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "88191229-620c-49a8-b04b-b159e51fc946",
              "parentUUID": "c2e65dce-1b92-466a-b717-3977cb289e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no property",
              "fullTitle": "Should test \"Update switch by id should fail with no property",
              "timedOut": false,
              "duration": 189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/', data);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(422);\nexpect(res.response.data.message).to.include('is a required property');",
              "err": {
                "message": "AssertionError: expected 403 to deeply equal 422",
                "estack": "AssertionError: expected 403 to deeply equal 422\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\id\\put.update.switch.spec.js:62:40)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 403\n+ 422\n"
              },
              "uuid": "bb334158-2405-4d43-a3a1-b7a34f623d84",
              "parentUUID": "c2e65dce-1b92-466a-b717-3977cb289e5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "158a3241-301f-4075-b219-a8cd4f619f94",
            "7ed26fc5-0a46-453f-8fa6-1da9ad4afe55",
            "88191229-620c-49a8-b04b-b159e51fc946"
          ],
          "failures": [
            "9c8b0244-9e8f-46e0-9805-f8b822bfadf9",
            "1e36bd75-5472-48cf-8ac5-a67a5c283e2c",
            "bb334158-2405-4d43-a3a1-b7a34f623d84"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1780,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "91f2bdd7-8f34-48c7-b4aa-7471b7b4dd3d",
          "title": "Should test \"create new switch",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\post.create.new.switch.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\post.create.new.switch.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: should delete location for \"account does not exist\"",
              "fullTitle": "Should test \"create new switch \"after all\" hook: should delete location for \"account does not exist\"",
              "timedOut": false,
              "duration": 341,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/switches/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"Switch with id \"+ id + \" is deleted\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\post.create.new.switch.spec.js:42:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "0b6fd493-33ea-4709-a84b-f9bbf49c3e69",
              "parentUUID": "91f2bdd7-8f34-48c7-b4aa-7471b7b4dd3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should POST new switch successfully",
              "fullTitle": "Should test \"create new switch should POST new switch successfully",
              "timedOut": false,
              "duration": 715,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data[0].switch_id;\nconsole.log(\"Switch with id \"+ id + \" is created\")",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\post.create.new.switch.spec.js:22:31)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "7cd374f9-d4cb-492b-bc9c-cb234d2df486",
              "parentUUID": "91f2bdd7-8f34-48c7-b4aa-7471b7b4dd3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"create new switch account does not exist",
              "timedOut": false,
              "duration": 417,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/switches', data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "d9ffa141-9961-49dd-9df6-e6871e4a8c84",
              "parentUUID": "91f2bdd7-8f34-48c7-b4aa-7471b7b4dd3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9ffa141-9961-49dd-9df6-e6871e4a8c84"
          ],
          "failures": [
            "7cd374f9-d4cb-492b-bc9c-cb234d2df486"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
          "title": "Should test \"Change/switch working mode (manual/auto)",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\put.change.switch.mode.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\put.change.switch.mode.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT switch mode successfully",
              "fullTitle": "Should test \"Change/switch working mode (manual/auto) should PUT switch mode successfully",
              "timedOut": false,
              "duration": 533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/mode?system_id=' + id, data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "66d64a7b-637e-47c5-808c-3cb213b85c08",
              "parentUUID": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Change/switch working mode (manual/auto) account does not exist",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/switches/mode?system_id=' + id, data,{\n    headers: {\n        'Authorization': 'qqq',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "fdea874f-11f2-46d8-910a-53b29b8641f2",
              "parentUUID": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"Change/switch working mode (manual/auto) should fail with Forbidden",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches/mode?system_id=' + id, data);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "919845e6-46ed-4833-a88f-4622a1c2c6ed",
              "parentUUID": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"Change/switch working mode (manual/auto) should fail with empty data",
              "timedOut": false,
              "duration": 290,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/mode?system_id=' + id, emptyData);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(422);",
              "err": {},
              "uuid": "6718a7da-1253-4096-9a60-13179b7308db",
              "parentUUID": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Change/switch working mode (manual/auto) should fail with wrong id",
              "timedOut": false,
              "duration": 547,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/mode?system_id=' + wrongId, data);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "0314ac7b-80d1-46a3-b5b8-953ca9a6f845",
              "parentUUID": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no property",
              "fullTitle": "Should test \"Change/switch working mode (manual/auto) should fail with no property",
              "timedOut": false,
              "duration": 493,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/mode?', data);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(422);\nexpect(res.response.data.message).to.include('is a required property');",
              "err": {},
              "uuid": "d3bb25bb-cb5a-4bd5-8f03-68022b6d7304",
              "parentUUID": "81d846fe-24a0-4ef7-8ff4-e805e79ede83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66d64a7b-637e-47c5-808c-3cb213b85c08",
            "fdea874f-11f2-46d8-910a-53b29b8641f2",
            "919845e6-46ed-4833-a88f-4622a1c2c6ed",
            "6718a7da-1253-4096-9a60-13179b7308db",
            "0314ac7b-80d1-46a3-b5b8-953ca9a6f845",
            "d3bb25bb-cb5a-4bd5-8f03-68022b6d7304"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2470,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1671d448-201a-465c-a9be-441f0065fe49",
          "title": "Should test \"In manual mode toggle system heating panel",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\put.toddle.switch.spec.js",
          "file": "\\spec\\powder_watts\\api\\switch\\put.toddle.switch.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT switch mode successfully",
              "fullTitle": "Should test \"In manual mode toggle system heating panel should PUT switch mode successfully",
              "timedOut": false,
              "duration": 3858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/status?system_id=' + id+'&ignore_mode=' + mode, {}, {\n    'Accept': 'application/json'\n});\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "75b216a7-dd97-4b7c-80c0-4c721cd44af9",
              "parentUUID": "1671d448-201a-465c-a9be-441f0065fe49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"In manual mode toggle system heating panel account does not exist",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/switches/status?system_id=' + id+'&ignore_mode=' + mode,null, {\n    headers: {\n        'Authorization': 'qqq',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "dfdd044b-52b2-4918-a119-265f7cc1cf02",
              "parentUUID": "1671d448-201a-465c-a9be-441f0065fe49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"In manual mode toggle system heating panel should fail with Forbidden",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/switches/status?system_id=' + id+'&ignore_mode=' + mode, {}, {\n    'Accept': 'application/json'\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "dfc4072f-fc7f-4053-919b-d4097b72b222",
              "parentUUID": "1671d448-201a-465c-a9be-441f0065fe49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong data in ignore_mode",
              "fullTitle": "Should test \"In manual mode toggle system heating panel should fail with wrong data in ignore_mode",
              "timedOut": false,
              "duration": 493,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/status?system_id=' + id+'&ignore_mode=' + wrongMode,{}, {\n    'Accept': 'application/json'\n});\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(422);",
              "err": {},
              "uuid": "712ebc26-7afa-4247-adc4-cb06ab729375",
              "parentUUID": "1671d448-201a-465c-a9be-441f0065fe49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"In manual mode toggle system heating panel should fail with wrong id",
              "timedOut": false,
              "duration": 530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/status?system_id=' + wrongId +'&ignore_mode=' + mode,{}, {\n    'Accept': 'application/json'\n});\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "29a53072-616a-4d38-bdfa-d332fbb55be0",
              "parentUUID": "1671d448-201a-465c-a9be-441f0065fe49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty parameter ",
              "fullTitle": "Should test \"In manual mode toggle system heating panel should fail with empty parameter ",
              "timedOut": false,
              "duration": 449,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/switches/status?system_id=' + '' +'&ignore_mode=' + mode,{}, {\n    'Accept': 'application/json'\n});\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(422);\n//TODO after fixing. STATUS 500 WiTH EMPTY PARAMETER",
              "err": {
                "message": "AssertionError: expected 500 to deeply equal 422",
                "estack": "AssertionError: expected 500 to deeply equal 422\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\switch\\put.toddle.switch.spec.js:71:40)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 500\n+ 422\n"
              },
              "uuid": "f66f1a28-9274-4434-af2a-3c2ebd64055b",
              "parentUUID": "1671d448-201a-465c-a9be-441f0065fe49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75b216a7-dd97-4b7c-80c0-4c721cd44af9",
            "dfdd044b-52b2-4918-a119-265f7cc1cf02",
            "dfc4072f-fc7f-4053-919b-d4097b72b222",
            "712ebc26-7afa-4247-adc4-cb06ab729375",
            "29a53072-616a-4d38-bdfa-d332fbb55be0"
          ],
          "failures": [
            "f66f1a28-9274-4434-af2a-3c2ebd64055b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5695,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "321eff7c-1750-44e1-a4ac-4432294036ab",
          "title": "Should test \"Check system installation status\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\get.check.system.intallation.status.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\get.check.system.intallation.status.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET status successfully",
              "fullTitle": "Should test \"Check system installation status\" should GET status successfully",
              "timedOut": false,
              "duration": 448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + id + '/installation_status');\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "f10b3af8-24e0-4029-bdb5-e814e0667ee1",
              "parentUUID": "321eff7c-1750-44e1-a4ac-4432294036ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should a user to be unauthorized",
              "fullTitle": "Should test \"Check system installation status\" should a user to be unauthorized",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + id + '/installation_status', {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "967d4fe8-9195-43e4-8d94-ad8951f9aa99",
              "parentUUID": "321eff7c-1750-44e1-a4ac-4432294036ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Check system installation status\" should fail with wrong id",
              "timedOut": false,
              "duration": 537,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + wrongId + '/installation_status');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(403)\nexpect(res.response.statusText).to.eql(\"Forbidden\");",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 403",
                "estack": "AssertionError: expected 400 to deeply equal 403\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\get.check.system.intallation.status.spec.js:36:40)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 400\n+ 403\n"
              },
              "uuid": "db87abf5-6640-42e5-ac05-85d2fedd1173",
              "parentUUID": "321eff7c-1750-44e1-a4ac-4432294036ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty parameter",
              "fullTitle": "Should test \"Check system installation status\" should fail with empty parameter",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + {} + '/installation_status');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(400)\nexpect(res.response.statusText).to.eql(\"Bad Request\");",
              "err": {},
              "uuid": "947d778a-d9e1-458e-b47c-c9cf22f5f921",
              "parentUUID": "321eff7c-1750-44e1-a4ac-4432294036ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f10b3af8-24e0-4029-bdb5-e814e0667ee1",
            "967d4fe8-9195-43e4-8d94-ad8951f9aa99",
            "947d778a-d9e1-458e-b47c-c9cf22f5f921"
          ],
          "failures": [
            "db87abf5-6640-42e5-ac05-85d2fedd1173"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1375,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b7b4048a-d874-408b-9654-fde498e80619",
          "title": "Should test \"Get info about cameras and switches of some system in some location\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\get.info.about.cameras.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\get.info.about.cameras.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET events successfully",
              "fullTitle": "Should test \"Get info about cameras and switches of some system in some location\" should GET events successfully",
              "timedOut": false,
              "duration": 639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/devices?system_id=' + id);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "19d90452-96d6-49b0-b58d-91b289231a42",
              "parentUUID": "b7b4048a-d874-408b-9654-fde498e80619",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should a user to be unauthorized",
              "fullTitle": "Should test \"Get info about cameras and switches of some system in some location\" should a user to be unauthorized",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/devices?system_id=' + id, {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "3f342437-daca-4bd5-be01-e86df6d581f1",
              "parentUUID": "b7b4048a-d874-408b-9654-fde498e80619",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Get info about cameras and switches of some system in some location\" should fail with wrong id",
              "timedOut": false,
              "duration": 294,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/devices?system_id=' + wrongId);\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(404)\nexpect(res.response.statusText).to.eql(\"Not Found\");",
              "err": {
                "message": "AssertionError: expected 400 to deeply equal 404",
                "estack": "AssertionError: expected 400 to deeply equal 404\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\get.info.about.cameras.spec.js:35:40)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 400\n+ 404\n"
              },
              "uuid": "6c6ba696-37bc-4d98-a98f-0028fa5f96a9",
              "parentUUID": "b7b4048a-d874-408b-9654-fde498e80619",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty parameter",
              "fullTitle": "Should test \"Get info about cameras and switches of some system in some location\" should fail with empty parameter",
              "timedOut": false,
              "duration": 461,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/devices?system_id=');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(400)\nexpect(res.response.statusText).to.eql(\"Bad Request\");",
              "err": {},
              "uuid": "88901c2f-bc0e-4254-8b54-6d74acc1e9ed",
              "parentUUID": "b7b4048a-d874-408b-9654-fde498e80619",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19d90452-96d6-49b0-b58d-91b289231a42",
            "3f342437-daca-4bd5-be01-e86df6d581f1",
            "88901c2f-bc0e-4254-8b54-6d74acc1e9ed"
          ],
          "failures": [
            "6c6ba696-37bc-4d98-a98f-0028fa5f96a9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1580,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e161cee5-f81d-4cad-9eb0-62b54d1932e5",
          "title": "Should test \"Check system installation status",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\get.snooze.system.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\get.snooze.system.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET system installation status of ile successfully",
              "fullTitle": "Should test \"Check system installation status should GET system installation status of ile successfully",
              "timedOut": false,
              "duration": 540,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + id + '/snooze');\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "4cf50b38-daa0-4e43-ac47-8b2e24a81d30",
              "parentUUID": "e161cee5-f81d-4cad-9eb0-62b54d1932e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Check system installation status account does not exist",
              "timedOut": false,
              "duration": 328,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + id + '/snooze', null, {\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\n// console.log(res.response.statusText);\nexpect(res.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");\n//TODO AFTER FIXING - STATUS 200 without token on prod",
              "err": {
                "message": "AssertionError: expected 200 to not deeply equal 200",
                "estack": "AssertionError: expected 200 to not deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\get.snooze.system.spec.js:32:35)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": ""
              },
              "uuid": "74603b16-7de0-4e23-84bf-d79f01a59744",
              "parentUUID": "e161cee5-f81d-4cad-9eb0-62b54d1932e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4cf50b38-daa0-4e43-ac47-8b2e24a81d30"
          ],
          "failures": [
            "74603b16-7de0-4e23-84bf-d79f01a59744"
          ],
          "pending": [],
          "skipped": [],
          "duration": 868,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c2b5add0-ec6c-4932-acf1-9d627b425ca6",
          "title": "Should test \"Delete system\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\id\\delete.system.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\id\\delete.system.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should POST new system successfully",
              "fullTitle": "Should test \"Delete system\" should POST new system successfully",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/systems/', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.id;\nconsole.log(\"system with id \" + id + \" was created\")",
              "err": {},
              "uuid": "eb6da7dd-0a12-4ad8-8f39-a3b5c21ee5a9",
              "parentUUID": "c2b5add0-ec6c-4932-acf1-9d627b425ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should DELETE system successfully",
              "fullTitle": "Should test \"Delete system\" should DELETE system successfully",
              "timedOut": false,
              "duration": 1162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/systems/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"system with id \"+ id + \" is deleted\")",
              "err": {},
              "uuid": "dcfd6a8d-b6ec-463a-94f8-e6ba979c62e8",
              "parentUUID": "c2b5add0-ec6c-4932-acf1-9d627b425ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with Unauthorized",
              "fullTitle": "Should test \"Delete system\" should FAIL with Unauthorized",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/systems/' + id, {},\n    {\n        'Authorization': ''\n    },);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "d16407d4-6c00-4873-a150-f9010e58617c",
              "parentUUID": "c2b5add0-ec6c-4932-acf1-9d627b425ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Delete system\" should fail with wrong id",
              "timedOut": false,
              "duration": 329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/systems/' + wrongId);\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);",
              "err": {},
              "uuid": "5853d656-78fc-4d87-982d-e1213a5e4bce",
              "parentUUID": "c2b5add0-ec6c-4932-acf1-9d627b425ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should FAIL with wrong request type",
              "fullTitle": "Should test \"Delete system\" should FAIL with wrong request type",
              "timedOut": false,
              "duration": 481,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/systems/' + id)\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(415);\nexpect(res.response.statusText).to.include(\"Unsupported\");",
              "err": {},
              "uuid": "fe16f305-38e6-4115-9f5a-207f3444e276",
              "parentUUID": "c2b5add0-ec6c-4932-acf1-9d627b425ca6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb6da7dd-0a12-4ad8-8f39-a3b5c21ee5a9",
            "dcfd6a8d-b6ec-463a-94f8-e6ba979c62e8",
            "d16407d4-6c00-4873-a150-f9010e58617c",
            "5853d656-78fc-4d87-982d-e1213a5e4bce",
            "fe16f305-38e6-4115-9f5a-207f3444e276"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2809,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "21554aae-193d-4966-a18d-924ed16ca2ab",
          "title": "Should test \"Get events of some system\"",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\id\\get.events.of.system.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\id\\get.events.of.system.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should GET events successfully",
              "fullTitle": "Should test \"Get events of some system\" should GET events successfully",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + id + '/events');\nexpect(res.status).to.eql(200);",
              "err": {},
              "uuid": "d666ba78-b141-484a-a4c5-3fc75716acd0",
              "parentUUID": "21554aae-193d-4966-a18d-924ed16ca2ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should a user to be unauthorized",
              "fullTitle": "Should test \"Get events of some system\" should a user to be unauthorized",
              "timedOut": false,
              "duration": 398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + id + '/events', {}, {\n    'Authorization': '',\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(401);\nexpect(res.response.statusText).to.eql(\"Unauthorized\");",
              "err": {},
              "uuid": "bed8221e-ab5e-42e7-81f8-c1c1e349ad8c",
              "parentUUID": "21554aae-193d-4966-a18d-924ed16ca2ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Get events of some system\" should fail with wrong id",
              "timedOut": false,
              "duration": 535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/' + wrongId + '/events');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(400)\nexpect(res.response.statusText).to.eql(\"Bad Request\");\n//TODO AFTER FIXING. Got status 200 with wrong id",
              "err": {},
              "uuid": "2afa776b-3af8-4cf6-95c2-434e79ec0352",
              "parentUUID": "21554aae-193d-4966-a18d-924ed16ca2ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty parameter",
              "fullTitle": "Should test \"Get events of some system\" should fail with empty parameter",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/systems/'  + {} + '/events');\nconsole.log(res.response.statusText)\nexpect(res.response.status).to.eql(400)\nexpect(res.response.statusText).to.eql(\"Bad Request\");",
              "err": {},
              "uuid": "927338ff-289b-48b8-b746-26866b20f834",
              "parentUUID": "21554aae-193d-4966-a18d-924ed16ca2ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d666ba78-b141-484a-a4c5-3fc75716acd0",
            "bed8221e-ab5e-42e7-81f8-c1c1e349ad8c",
            "2afa776b-3af8-4cf6-95c2-434e79ec0352",
            "927338ff-289b-48b8-b746-26866b20f834"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1718,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
          "title": "Should test \"Update system by id",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\id\\put.update.system.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\id\\put.update.system.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should PUT system successfully",
              "fullTitle": "Should test \"Update system by id should PUT system successfully",
              "timedOut": false,
              "duration": 275,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/systems/' + id, data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal 200",
                "estack": "AssertionError: expected undefined to deeply equal 200\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\id\\put.update.system.spec.js:23:31)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "730507f6-df24-415d-8493-e00e3796411e",
              "parentUUID": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"Update system by id account does not exist",
              "timedOut": false,
              "duration": 399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.put('/systems/' + id, data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "18b0e63c-175a-4165-9c23-6b9568c18c45",
              "parentUUID": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with Forbidden",
              "fullTitle": "Should test \"Update system by id should fail with Forbidden",
              "timedOut": false,
              "duration": 405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/systems/' + id, data);\nconsole.log(res.response.statusText);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include(\"Forbidden\");",
              "err": {},
              "uuid": "778a817a-2ed3-437d-b5c7-c91e87c7aa0c",
              "parentUUID": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with empty data",
              "fullTitle": "Should test \"Update system by id should fail with empty data",
              "timedOut": false,
              "duration": 514,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/systems/' + id, emptyData,\n    {'Content-Type': 'application/json'});\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(400);\nexpect(res.response.data.message).to.include(\"is empty or is missing fields\")",
              "err": {
                "message": "AssertionError: expected 500 to deeply equal 400",
                "estack": "AssertionError: expected 500 to deeply equal 400\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\id\\put.update.system.spec.js:49:40)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "222a1736-45f1-47e1-959f-bf2613615d99",
              "parentUUID": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with wrong id",
              "fullTitle": "Should test \"Update system by id should fail with wrong id",
              "timedOut": false,
              "duration": 465,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/systems/' + wrongId, data);\nconsole.log(res.response.data.error);\nexpect(res.response.status).to.eql(403);",
              "err": {
                "message": "AssertionError: expected 500 to deeply equal 403",
                "estack": "AssertionError: expected 500 to deeply equal 403\n    at Context.<anonymous> (C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\id\\put.update.system.spec.js:56:40)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 500\n+ 403\n"
              },
              "uuid": "825c983c-6ed1-4ba3-b71a-513993cdb708",
              "parentUUID": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with no property",
              "fullTitle": "Should test \"Update system by id should fail with no property",
              "timedOut": false,
              "duration": 398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/systems/', data, {'Content-Type': 'application/json'});\nconsole.log(res.response.data.message);\nexpect(res.response.status).to.eql(403);\nexpect(res.response.statusText).to.include('Forbidden');",
              "err": {},
              "uuid": "f97987c9-945f-46a5-9a3e-b7c1252f3454",
              "parentUUID": "ba183a5c-b43b-4b07-b449-0f1fdae4f5cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18b0e63c-175a-4165-9c23-6b9568c18c45",
            "778a817a-2ed3-437d-b5c7-c91e87c7aa0c",
            "f97987c9-945f-46a5-9a3e-b7c1252f3454"
          ],
          "failures": [
            "730507f6-df24-415d-8493-e00e3796411e",
            "222a1736-45f1-47e1-959f-bf2613615d99",
            "825c983c-6ed1-4ba3-b71a-513993cdb708"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "448782be-a6c7-49b0-af2a-ff9a6d565192",
          "title": "Should test \"create new system",
          "fullFile": "C:\\Code\\pwd\\pwd_backend_tests\\spec\\powder_watts\\api\\systems\\post.create.new.system.spec.js",
          "file": "\\spec\\powder_watts\\api\\systems\\post.create.new.system.spec.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook: should delete system in \"Should test \"create new system\"",
              "fullTitle": "Should test \"create new system \"after all\" hook: should delete system in \"Should test \"create new system\"",
              "timedOut": false,
              "duration": 1125,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/systems/' + id);\nconsole.log(res.statusText);\nexpect(res.status).to.eql(200);\nconsole.log(\"System with id \"+ id + \" is deleted\")",
              "err": {},
              "uuid": "8527f4b3-eb75-40c4-a7c6-cff92e9835d0",
              "parentUUID": "448782be-a6c7-49b0-af2a-ff9a6d565192",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should POST new system successfully",
              "fullTitle": "Should test \"create new system should POST new system successfully",
              "timedOut": false,
              "duration": 445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/systems', data);\nconsole.log(res.status);\nexpect(res.status).to.eql(200);\nid = res.data.data.id;\nconsole.log(id)",
              "err": {},
              "uuid": "da8366d5-dd20-4fa2-9df3-5244e8e9099b",
              "parentUUID": "448782be-a6c7-49b0-af2a-ff9a6d565192",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "account does not exist",
              "fullTitle": "Should test \"create new system account does not exist",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.custom.post('/systems', data,{\n    headers: {\n        'Authorization': '',\n        'Accept': 'application/json'\n    },\n});\nconsole.log(res.response.statusText);\nexpect(res.response.status).not.to.eql(200);\nexpect (res.response.statusText).to.include(\"Unauthorized\");",
              "err": {},
              "uuid": "ca7101a4-144c-418f-95a2-74055d5e971e",
              "parentUUID": "448782be-a6c7-49b0-af2a-ff9a6d565192",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da8366d5-dd20-4fa2-9df3-5244e8e9099b",
            "ca7101a4-144c-418f-95a2-74055d5e971e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 846,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My\\ Custom\\ Title",
        "charts": "true",
        "code": "true"
      },
      "version": "6.2.0"
    }
  }
}